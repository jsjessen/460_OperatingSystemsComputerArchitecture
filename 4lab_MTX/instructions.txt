                     460 LAB Assignment #4
                     DUE: Monday 2-23, 2015

CS = Code Segment
DS = Data Segment
SS = Stack Segment

Download LAB4.help
looking at ...  uPC uCS flag  0 = 64k in 16 bit mode (so wraps around like a circle)

uDS, uES, uCS should all be set to segment


1. OBJECTIVES:
   Kernel/User mode images and system calls

2. REQUIREMENTS:

   Implement the following system call functions for the MTX system:
   For each syscall, return (int) value >= 0 for OK, or -1 for BAD.
***************************************************************************
(0). pid = getpid()  : return the proc's pid

(1). ps()            : enter Kerenl to print the status info of the procs
 
(2). chname(char *s) : ask for a string *s, enter Kernel to change the
                       running proc's name to *s.
(3). kfork()         : enter Kernel to kfork a child with /bin/u1 as Umode image

(4). kswitch()       : enter Kernel to switch process (call tswitch()).

(5). pid = wait(int *exitValue) : enter Kernel to wait for a ZOMBIE child,
                                  return its pid (or -1 if no child) and its
                                  exitValue.
(6). exit(int exitValue) : enter Kernel to die with an exitValue.
==========================================================================
(7). getc()/putc() as syscalls to Kernel.
 
***************************************************************************

                    3. HELPS INFO

POSTED FILES:
                    samples
                      |
                     LAB4.post
            ----------------------------------------------
             |              |        |   |    |         |
            USER          mtxlib     mk t.c ts.s  Other C files
        ------------    (loader.o)  
       mku, u.s, u1.c

=============================================================
      mtxlib is a link LIBRARY containing
             load("filename", segment);
      which loads filename into segment for execution
============================================================

                          MTX Kernel:

The entry point of  INT 80 handler is (in ts.s file)

       _int80h:
        SAVE:    ! save registers in ustack; switch to Kernel space;
                 ! save uSS, uSP in proc

                 call _kcinth      ! call int kcinth() in C; fix return value

        _goImode:! restore SS, SP from saved uSS, uSP;
                 ! pop ustack to restore CPU registers
                 ! IRET        return to where INT 80 was issured in Umode
                           
============================================================================
4. DEMO PROGRAM:
                  samples/LAB4.post/mtximage
   download and run it as a virtual FD for QEMU.
============================================================================

                  460 LAB #4 HELPs

In your main() function:

1. initialize kernel data structures as in LAB#3

2. Set Vector 80:
 
        int int80h();    // tell C compiler inth80 is a function
                         // _int80h: is in assembly code

        put_word(int80h, 0x0000, 80*4);    // set PC = _int80h
        put_word(0x1000, 0x0000, 80*4+2);  // set CS = 0x1000

 
3. Modify YOUR kfork() function to

   PROC *kfork(char *filename)
   {
     // kfork as BEFORE: pid = new PROC's pid

     new PROC's segment = (pid+1)*0x1000;

     if (filename){
         load filename to segment by load(filename, segment);

===============================================================================
(3).1    SETUP new PROC's ustack for it to return to Umode to execute filename;
(3.2).   Set new PROC.uss = segment;
                 PROC.usp = TOP of ustack (per INT 80)

(3).1 and (3.2) ACCOMPLISH THE FOLLOWING DIAGRAM:         

       new PROC
        ------
        |uss | = new PROC's SEGMENT value
        |usp | = -24                                    
        --|---                                    Assume P1 in segment=0x2000:
          |                                              0x30000  
          |                                              HIGH END of segment
  (LOW) | |   ----- by SAVE in int80h ----- | by INT 80  |
  --------|-------------------------------------------------------------
        |uDS|uES| di| si| bp| dx| cx| bx| ax|uPC|uCS|flag|NEXT segment
  ----------------------------------------------------------------------
         -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1 |

Use put_word(w, segment, offset) to set the ustack contents to contain:

         uDS=segment, uES=segment,          // MUST be the segment
         di, si, bp, dx, cx, bx, ax = 0     // CPU registers are all 0
         uPC = 0                            // (uCP, uPC) = VRITUAL address 0 
         uCS = segment
         flag=0x0200 (I bit-1 for allow interrupts)

         // put_word(4, p->uss, p->usp + (2 * 9)) // for uPC to be set to 4
         // 0 out everybody (di through ax) first, then 
         //put_word move uDS to segment 
         //put_word move uES to segment 

         call _main in u.s is address 0
===============================================================================
     }

     return pointer to new PROC;
   }

5. Let P0 create P1 by 
          kfork("/bin/u1");
   P1 will have an Umode image /bin/u1 loaded in the segment 0x2000.

6. Let P0 tswitch to P1. P1 resumes to body() AS IN Lab#3

7. In body() function: ADD a 'u' command
      
      case 'u': goUmode();  break;   // let process goUmode
-----------------------------------------------------------------------

8. Write YOUR first version of u1.c file as 


#include "ucode.c"
int color;

main()
{ 
   printf("I am in Umode segment=%x\n", getcs());
   while(1);
}

9. If you see the above message after 'u' command, 
   your P1 has goUmode successfully.


10. Then use the given u1.c file in USER/ to generate new u1 image.
    Then try to do syscalls 0 to 5.
    Lastly, implement syscall 6 for getc()/putc() in kernel.

 
