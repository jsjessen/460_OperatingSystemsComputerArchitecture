                     460 LAB Assignment #4

1. OBJECTIVES:
   Kernel/User mode images and system calls

2. REQUIREMENTS:

   Implement the following system call functions for the MTX system:
   For each syscall, return (int) value >= 0 for OK, or -1 for BAD.
***************************************************************************
(0). pid = getpid()  : return the proc's pid

(1). ps()            : enter Kerenl to print the status info of the procs
 
(2). chname(char *s) : ask for a string *s, enter Kernel to change the
                       running proc's name to *s.
(3). kfork()         : enter Kernel to kfork a child with /bin/u1 as Umode image

(4). kswitch()       : enter Kernel to switch process (call tswitch()).

(5). pid = wait(int *exitValue) : enter Kernel to wait for a ZOMBIE child,
                                  return its pid (or -1 if no child) and its
                                  exitValue.
(6). exit(int exitValue) : enter Kernel to die with an exitValue.

(7). getc()/putc() as syscalls to Kernel.
 
***************************************************************************

                    3. HELPS INFO

POSTED FILES:
                    samples
                      |
                     LAB4.post
            ----------------------------------------------
             |              |        |   |    |         |
            USER          mtxlib     mk t.c ts.s  Other C files
        ------------    (loader.o)  
       mku, u.s, u1.c

=============================================================
      mtxlib is a link LIBRARY containing
             load("filename", segment);
      which loads filename into segment for execution
============================================================

                          MTX Kernel:

The entry point of  INT 80 handler is (in ts.s file)

       _int80h:
        SAVE:    ! save registers in ustack; switch to Kernel space;
                 ! save uSS, uSP in proc

                 call _kcinth      ! call int kcinth() in C; fix return value

        _goImode:! restore SS, SP from saved uSS, uSP;
                 ! pop ustack to restore CPU registers
                 ! IRET        return to where INT 80 was issured in Umode
                           
============================================================================
4. DEMO PROGRAM:
                  samples/LAB4.solution/mtximage
   download and run it as a virtual FD for QEMU.
============================================================================
