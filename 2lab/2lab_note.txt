Download the files from ~samples/LAB2/ directory:

    q, mk, t.c, s.s, mylib, mtximage, lab2.sample

Look at the mk script. Run mk to generate a bootable image in /boot of mtximage.
Boot mtx from the virtual FD and test run the simple MTX. LAB#2 is an extension 
of this program. lab2.sample is a sample solution of LAB#2

  -------------------------------------------------------------------
           mylib is a LINKing library containing a
      printf(), which supports %c %s %d %x %l (for LONG values).
      gets(buf[ ]), which can input a string of up to 64 chars.

      TRY TO USE YOUR OWN printf() and gets() functions.
  -------------------------------------------------------------------

ASSIGNMENT: Modify t.c to do the following

      ----------------- NOTE -----------------------
       lab2.mtximage IS A SOLUTION TO THIS ASSIGNMENT. 
            Run it to see what YOUR mtx should do.
      ----------------------------------------------

1. Define PROC structure as follows.

          typedef struct proc{
                  struct proc *next;
                  int    ksp;

                  int    status;       // FREE|READY|SLEEP|BLOCK|ZOMBIE
                  int    priority;     // priority
                  int    pid;          // process pid
                  int    ppid;         // parent pid 
                  struct proc *parent; // pointer to parent PROC

                  int    kstack[SSIZE]; // SSIZE=1024
           }  


   #define NPROC 9
   PROC proc[NPROC], *running, *freeList, *readyQueue;

2. When MTX starts, initialize the PROC structures as follows:
        
   (1). For each PROC do:
            status = FREE;
            pid = index of PROC
            priority = 0;
            ppid = 0; 
            parent = 0;

   (2). Let running->PROC[0]; status=READY; parent=&PROC[0];
         
   (3). freeList = P1 -> P2 ----> P8 -> 0

   (4). readyQueue = 0;

After initalization, the system is running P0. 
Then, let P0 execute

       kfork();   // create a child process in readyQueue

       while(1){  // loop forever
         if (readyQueue) 
            tswitch(); // switch process
       }

3. Wirte YOUR own C code for
       
    PROC *get_proc()
    {
      get a FREE PROC from freeList; return PROC pointer; 
      return 0 if no more FREE PROCs.
    }
   
    put_proc(PROC *p)
    {
       enter p into freeList;
    }


4. PROC *readyQueue is a priority queue containing PROCs READY to run. 
   PROCs with the same priority are ordered FIFO. 

   Write YOUR Code for
      
    enqueue(PROC **queue, PROC *p)
    {
       enter p into queue by priority; 
    }
 
    PROC *dequeue(PROC **queue)
    {
       remove a PROC with the highest priority (the first one in queue)
       return its pointer;
    }
    
    printQueue(PROC *queue)
    {
       print the queue entries in [pid, prioirty]->  format;
    }


5. Instead of creating ALL the PROCs at once, write a
           PROC *kfork() 
   function to create a process DYNAMICALLY.

    PROC *kfork()
    {  
       
      (1). PROC *p = get_proc(); to get a FREE PROC from freeList;
                     if none, return 0 for FAIL;

      (2). Initialize the new PROC p with
             --------------------------
             status   = READY;
             priority = 1;
             ppid = running pid;
             parent = running;
            --------------------------

          *********** THIS IS THE MAIN PART OF THE ASSIGNMENT!!!***********
          INITIALIZE p's kstack to make it start from body() when it runs.

          To do this, PRETNED that the process called tswitch() from the 
          the entry address of body() and executed the SAVE part of tswitch()
          to give up CPU before. 
          Initialize its kstack[ ] and ksp to comform to these.
  
          enter p into readyQueue;
          *****************************************************************

          return p;
    }

6. In the body() function, add a new command 'f'. The commands are:

      's' : call tswitch to switch process;
      'q' : call exit(), which changes running process status to ZOMBIE,
                         then call tswitch() to give up CPU;

      'f' : kfork() a child PROC;
            print message showing success or failure.

7. Use the MODIFIED scheduler() function:

    scheduler()
    {
       if (running->status == READY)
          enqueue(&readyQueue, running);
       running = dequeue(&readyQueue);
    }
