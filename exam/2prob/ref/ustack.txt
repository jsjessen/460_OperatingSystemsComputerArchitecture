               NOTES #6 User Mode Image

1. User Mode Image File: Every Umode image is created as follows.

 !--------------- u.s file ------------------------------
        .globl _main, _getcs, _syscall, _exit ! globals

        call _main

! syscall exit(0)
        push #0            ! push exit_value 0
        call _exit

_getcs: mov  ax, cs        ! return CS segment value
        ret

!  int  syscall(a,b,c,d)    in C:   LISTEN TO LECTURE !!!!!
_syscall   
         int 80          
         ret

(2). Combine u.s with the following piece of C code to generate a.out
     (with header!!). cp a.out to /bin/u1 on a MTX diskimage.

/*************** u1.c file in C ***********/
main()
{ 
  printf("I am in Umode, segment=%x\n", getcs());
}

(3). Use BCC to generate u1 and copy it to /bin/u1 in mtximage

         # mk NAME sh script: e.g. mk u1
         as86 -s u.o u.s
         bcc -c -ansi $1.c 
         ld86 u.o $1.o mtxlib /usr/bin/libc.a
         mount -p loop mtximage /mnt
         cp $1 /mnt/bin
         umount /mnt

2. Loader:
   In mtxlib is a  load(char *filename, u16 segment)
function, which loads filename to segment for execution.


3. Set Vector 80:

   When MTX starts, YOU MUST set the vector 80 contents for INT 80:
 
        int int80h();    // tell C compiler inth80 is a function
                         // _int80h: is in assembly code

        put_word(int80h, 0x0000, 80*4);    // set PC = _int80h
        put_word(0x1000, 0x0000, 80*4+2);  // set CS = 0x1000

 
4. Modify YOUR kfork() function to

   PROC *kfork(char *filename)
   {
     // kfork as BEFORE: pid = new PROC's pid

     new PROC's segment = (pid+1)*0x1000;

     if (filename){
         load filename to segment;

(4).1    SETUP new PROC's ustack for it to return to Umode to execute filename;
         Set new PROC.uss = segment;
                 PROC.usp = TOP of ustack (per INT 80)
     }

     return pointer to new PROC;
   }


When MTX starts, let P0 create P1 by 
            kfork("/bin/u1");
so that P1 will have an Umode image /bin/u1 loaded in the segment 0x2000.

============================================================================
       Step 4.1 is MOST CRUCIAL, so we explain it in detail:

(1). Pretend that the new PROC had done an INT 80 from its virtual address 0.
(2). When it DID  INT 80  its ustack was empty.
     
If so, the new PROC's saved uss MUST be equal to its segment. 
PROC's saved usp MUST point to its ustack TOP as shown in the following diagram:

       new PROC
        ------
        |uss-|--> new PROC's segment
        |usp |
        --|---
          |
          |
  (LOW) | v   ----- by SAVE in int80h ----- | by INT 80  | HIGH
  -------------------------------------------------------
        |uDS|uES| di| si| bp| dx| cx| bx| ax|uPC|uCS|flag|
  --------------------------------------------------------
         -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1 |  JJ: each 2 bytes
     (-24 bytes)
     0000 0000 0001 1000 = 24
     1111 1111 1110 1000 = -24
      F    F    E    8   in hexidecimal (from base 0 + 0xFFE8 offset)
                                        (could also start from high end and use neg offset)
    0xFFE8 uDS
    +2     uES
    +2      di
       ...
    
    0x10000 64k 
    how to represent in 16bit mod

Use put_word(w, segment, offset) to set the ustack contents to contain:

         uDS=segment, uES=segment,          // MUST be the segment
         di, si, bp, dx, cx, bx, ax = 0     // CPU registers are all 0
         uPC = 0                            // (uCP should be 0, uPC) = VRITUAL address 0 
         uCS = segment

         flag=0x0200 (I bit-1 for allow interrupts)

JJ: executes from uCS segment, uPC offset

5. When the new PROC execute goUmode in assembly, it does:

        restore CPU's ss by PROC.uss ===> segment
        restore CPU's sp by PROC.usp ===> sp = usp in the above diagram.

        pop registers ===> DS, ES = segment

        iret ============> (CS,PC)=(segment, 0) = u1's beginning address.
 


