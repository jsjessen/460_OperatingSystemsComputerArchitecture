460 Notes on Parallel Printer Driver

    Printer driver and output device driver design.

            Parallel Printer Port Interface:

    A PC usually has two parallel interface ports, denoted by LPT1 and LPT2, 
which support parallel printers. Each parallel port has a data register, a 
status register and a command register. The I/O port addresess and the contents
of the status and command registers are shown below.

(1). Parallel I/O ports:  Register       LPT1:      LPT2: 
                         ----------      -----      ----- 
                           DATA          0x378      0x3BC
                           STATUS        0x379      0x3BD
                           CMD           0x37A      0x3BE

(2). Status Register Contents:
        7      6      5         4         3         2      1      0
     NOTBUSY   -   NOPAPER    SELECT    NOERROR     -      -      -
     -------      ---------  --------  ---------- 
     1=READY      1=NOPAPER  1=OnLine  1=NOERROR 
 
(3). Command Register Usage:

        7      6      5         4        3        2       1       0
        -      -      -     EnableIRQ   INIT    SELECT          STROBE

Before printing, the printer must be initialized once by:

      INIT   : write 0x08  to CMD register first. Then
      select : write 0x0C  to CMD register.

To print, write a char to the DATA register. Then, strobe the printer once by
wrting a 1, followed by a 0, to bit 0 of the CMD register, simulating a strobe
pulse of width > 0.5 usec. For example, writing 

          0x1D = 00011101 followed by 
          0x1C = 00011100 strobes the printer with interrupts enabled.

(4). Assume that the printer's interrupt is enabled. When the printer is ready
to accept the next char, it interrupts at IRQ 7, which uses vector 15. In the 
interrupt handler, read the status register and check for error. If no error, 
send the next char to the printer and strobe it once again, etc.

/******************************************************************
                          Printer driver:

 Process and interrupt handler share a CIRCULAR buffer, with head, tail 
 pointers. To print, process calls prchar() to deposit chars into pbuf[], 
 waiting if no room. It prints the first char if the printer is not currently
 printing. To print a char:

(1). Write a char to printer's data PORT
           out_byte(dataPort, char);
 
(2). STROBE the printer's command PORT  once:
           out_byte(CmdPort, 0x1D);     // last bit = 1
	      //  delay(); (optional)
           out_byte(CmdPort, 0x1C);    // last bit = 0
 
 
Interrupt Handler                                PROCESS:
        <========   CIRCULAR pbuf[ ];    <=== prchar() <== prline()
                      head, tail;
                      isPrinting;
                     SEMAPHORE room;

 Interrupt handler: on each interrupt: print remaining chars in pbuf[] and 
 unblock any blocked process. 
 
If pbuf[] has no more chars: trun off printer interrupts
 
          out_byte(CmdPort, 0x0C);  /* turn off interrupts */
          inPrinting = 0;
*******************************************************************/ 

#define NPR         1
#define DATA    0x378       // #define PORT 0x3BC  for LPT2
#define STATUS DATA+1
#define CMD    DATA+2
#define PLEN       64

struct para{
   char pbuf[PLEN];
   int  head, tail;
   SEMAPHORE room;         // any room in pbuf[ ]?
   int isPrinting;         // 1 if printer is printing
   int port;
}printer;                  // printer[NPR] if many printers

int delay(){ }

pr_init()
{  

   Initialize head, tail, isPrinting to 0;
   Initialize SEMAPHORE room properly; 

   /* initialize printer INIT and SELECT */
   out_byte(CMD, 0x08);   /* init */
   out_byte(CMD, 0x0C);   /* init, select on */

}

int phandler()
{
   printf("printer interrupt!\n");
   status = in_byte(statusPort);    // read status port
   if (status & 0x08){              // check for noERROR only
 
       WRITE C CODE for interrupt handler

   }
out:
   out_byte(0x20, 0x20);           // re-enable the 8259
}

/********************** Upper half driver ************************/
int prchar(char c)
{

    WRITE C CODE for prchar()
}

int prline(char *line)
{
   WRITE C CODE FOR printing a line
}


SMAPLE SOLUTION: ~samples/PRINTER/mtximage




=================== Complete pr.c file ====================================


/******************************************************************
                          Printer driver:
 Process and interrupt handler share a CIRCULAR buffer, with head, tail 
 pointers. To print, process calls prchar() to deposit chars into pbuf[], 
 waiting if no room, and prints the first  char if the printer is not 
 printing, Interrupt handler will print the remaining chars in pbuf[],
 waking up the blocked process. 
 prline() is for processes to print one line at a time
*******************************************************************/ 

#define NPR         1
#define PORT    0x378       // #define PORT 0x3BC  for LPT2
#define STATUS PORT+1
#define COMD   PORT+2
#define PLEN      128

#define INT_CTL         0x20	// Master PIC Control reg
#define INT_MASK        0x21	// Master PIC Mask reg
#define INT2_CTL        0xA0	// Slave  PIC Control reg 
#define INT2_MASK       0xA1	// Slave  PIC Mask reg

int enable_irq(u8 irq_nr)
{
  lock();
  if (irq_nr < 8)
	out_byte(INT_MASK, in_byte(INT_MASK) & ~(1 << irq_nr));
  else
	out_byte(INT2_MASK,in_byte(INT2_MASK) & ~(1 << (irq_nr - 8)));
  unlock();
}

struct para{
   char pbuf[PLEN];
   int  head, tail;
   SEMAPHORE mutex;
   SEMAPHORE room;
   SEMAPHORE done;
   int printing;           // 1 if printer is printing
   int port;
}printer;                  // printer[NPR] if many printers

int delay(){ }

pr_init()
{  
   struct para *p;
   p = &printer;
   printf("pr_init %x\n", PORT);
   p->port = PORT;
   p->head = p->tail = 0;
   p->mutex.value = 1;   p->mutex.queue = 0;
   p->room.value = PLEN; p->room.queue = 0;
   p->done.value = 0;    p->done.queue = 0;

   /* initialize printer at PORT */
   out_byte(p->port+2, 0x08);   /* init */
   out_byte(p->port+2, 0x0C);   /* int, init, select on */
   enable_irq(7);
   p->printing = 0;
}

int strobe(struct para *p)   // strobe
{
    out_byte(p->port+2, 0x1D);  
       // delay();
    out_byte(p->port+2, 0x1C);
}

int phandler()
{
   int status; int c;
   struct para *p = &printer;

   printf("printer interrupt!\n");
   status = in_byte(p->port+1);
   if (status & 0x08){                // test for noERROR only
      if (p->room.value == PLEN){     // pbuf[] empty, nothing to print 
	 //out_byte(p->port+2, 0x0C); // turn off printer interrupts
         V(&p->done);                 // tell task print is DONE
         p->printing = 0;             // is no longer printing
         goto out;
      }
      // p->pbuf[] not empty ==> print next char
      c = p->pbuf[p->tail++] & 0x7F;
      p->tail %= PLEN;
      out_byte(p->port, c);          // print the char
      strobe(p);
      V(&p->room);                   
      goto out;
   }
   // abnormal printer status: should handle it but ignored here
out:
   out_byte(0x20, 0x20);             // re-enable the 8259
}

/************** Upper half driver ************************/
int prchar(char c)
{
    struct para *p = &printer;
    P(&p->room);               // wait for room in pbuf[] 
    lock();
    if (p->printing==0){       // print the char and turn on interrupts
       out_byte(p->port, c);
       p->printing = 1;
       strobe(p);
       unlock();
       return;
    }
    // already printing, put c into pbuf[]
    p->pbuf[p->head++] = c;
    p->head %= PLEN;
    unlock();
}

int kpline(char *line)
{
    struct para *p = &printer;
    P(&p->mutex);              // one process prints LINE at a time 
      while (*line)
	prchar(*line++);
    P(&p->done);              // wait until pbuf[ ] is DONE */
    V(&p->mutex);             // allow another process to print
}   

int upline(char *p)           // print line from Umode
{
  char *cp, line[128];
  cp = line;
  while (*cp = get_byte(running->uss, p)){
         cp++; p++;
  }
  printf("line=%s", line);
  kpline(line);
  printf("printing done\n");
}

