460 Notes on Keyboard Driver

JJ: Pressing a key (down, release) generates 2 interrupts

JJ: Interrupt handler is not a process!
    In a pipe, both sides are processes
    In device driver case, one is interrupt handler and other is process (Very different)
    Interrupt handler NEVER sleep/wait/block (CPU sleep?, Code sleep?, doesn't make sense))
                            these only apply to proc, not CPU or piece of code
    Interrupt handler can only wake up a proc 

    In single CPU mode, a proc in kernel cannot sleep or else it will mess up readyQueue
    In multi  CPU mode, proc must lock before sleeping so other proc can't mess with its stuff

JJ: INT macro:
                INTH call _kcinth

                _int80h:  INTH kcinth
                _tinth:   INTH thandler()...
                _kbdinth: INTH kbhandler()...

This note implements a simple KBD driver. The driver handles lower case key 
press only. Thus, no shift, control (esc) keys, etc. 

1. In main.c, install KBD interrupt handler (at vector 9)

//***************** main.c file *******************************

#include "kbd.c"

main()
{
       vid_init();  // must initialize display driver first before any print
       init();
       kfork(); 
       set_vec(80, int80h);
       
// install KBD interrupt handler, initilize kbd driver
       set_vec(9, kbinth); 
       kbinit();

       lock();
         set_vector(8, tinth);
         timer_init();

       while(1){        // process may BLOCK while waitng for key
        if (readyQueue)
           tswitch();
       }
}


2. KBD driver: Every (interrupt-driven) device driver consists of TWO parts:

  Upper-half: Process calls getc(), trying to get a char from buf[].
              -------------------------------------------
              |SHARED input buf[ ] and control variables|
              -------------------------------------------
  Lower-half: Interrupt handler; on interrupt, get scan code, translate into
              ASCII char and save it into an input buf[];
 
  Synchronization between the two halves:

    Process BLOCK/SLEEP if no char in buf[].
    Interrupt handler puts char into  buf[] and UNBLOCK/WAKEUP process


/************** A simple KBD driver USING SLEEP/WAKEUP **************


/********************* keymap.c file ***********************************/

 /* Scan codes to ASCII for unshifted keys; unused keys are left out */
char unshift[NSCAN] = { 
 0,033,'1','2','3','4','5','6',        '7','8','9','0','-','=','\b','\t',
 'q','w','e','r','t','y','u','i',      'o','p','[',']', '\r', 0,'a','s',
 'd','f','g','h','j','k','l',';',       0, 0, 0, 0,'z','x','c','v',
 'b','n','m',',','.','/', 0,'*',        0, ' '       
};

/* Scan codes to ASCII for shifted keys; unused keys are left out */
char shift[NSCAN] = {
 0,033,'!','@','#','$','%','^',        '&','*','(',')','_','+','\b','\t',
 'Q','W','E','R','T','Y','U','I',      'O','P','{','}', '\r', 0,'A','S',
 'D','F','G','H','J','K','L',':',       0,'~', 0,'|','Z','X','C','V',
 'B','N','M','<','>','?',0,'*',         0, ' '  
};

/**********************************************************************
                         kbd.c file
***********************************************************************/
#define KEYBD	         0x60	/* I/O port for keyboard data */
#define PORT_B           0x61   /* port_B of 8255 */
#define KBIT	         0x80	/* bit used to ack characters to keyboard */

#define NSCAN             64	/* Number of scan codes */
#define KBLEN             64    // input buffer size

#include "keymap.c"

extern int color;

typedef struct kbd{           // data struct representing the keyboard
    char buf[KBLEN];          // input buffer
    int  head, tail;          // CIRCULAR buffer JJ: Head for putting in, Tail taking out
    int  data;                // number of keys in bif[ ]  JJ: initially 0
}KBD;

KBD kbd;

int kbd_init()
{
  printf("kbinit()\n");
  kbd.data = 0;
  kbd.head = kbd.tail = 0;
  printf("kbinit done\n"); 
}

/******************************************************************************
 kbhandler() is the kbd interrupt handler. The KBD generates 2 interrupts
 for each key typed; one when the key is pressed and another one when the
 key is released. Each key generates a scan code. The scan code of key
 release is 0x80 + the scan code of key pressed. When the kbd interrupts,the
 scan code is in the data port (0x60) of the KBD interface. Read the scan code
 from the data port. Then ack the key input by strobing its PORT_B at 0x61.
*****************************************************************************/

JJ: I put the key there and interrupt you, don't put another key there until handshake.
    This way no keys are missed, otherwise you might just get the last one

int kbhandler()
{
  int scode, value, c;
  
  /* Fetch scan code from the keyboard hardware and acknowledge it. */
  scode = in_byte(KEYBD);	 /* get the scan code of the key */
  value = in_byte(PORT_B);	 /* strobe the keyboard to ack the char */
  out_byte(PORT_B, value | KBIT);/* first, strobe the bit high */
  out_byte(PORT_B, value);	 /* then strobe it low */

  printf("scode=%x    ", scode);  

  if (scode & 0x80)         // ignore key release JJ: start with simple case, e.g. not A with shift
     goto out;

  // translate scan code to ASCII; //using shift[ ] table if shifted;
  c = unshift[scode];

  /* store the character in buf[ ] for process to get */
  if (kbd.data >= KBLEN){   // buf[ ] already FULL
    printf("%c\n", 0x07); // JJ: warn user with beep (bell sound) if buf is full
    goto out;          
  }

  kbd.buf[kbd.head++] = c;
  kbd.head %= KBLEN;

  kbd.data++;           // inc data in buf[] by 1
  kwakeup(&kbd.data);   // wakeup process in upper half

out:
  out_byte(0x20, 0x20); // issue EOI to 8259 Interrupt controller
}

/********************** upper half routine ***********************/ 
int getc()
{
  int c;
  lock();                        // mask out (don't allow) interrupts 

  while(kbd.data <= 0){          // JJ: door locked, interrupts can't 
                                 // occur, so data will not be incremented (prevent race condition)
        unlock();                // must unlock before going to sleep
        ksleep(&kbd.data);
        lock();                  // lock again upon woken up
  }

  // JJ: Critical region
  c = kbd.buf[kbd.tail++] & 0x7F;
  kbd.tail %= KBLEN;
  kbd.data--;

  unlock();

  return c;
}

SMAPLE SOLUTION: ~samples/KBD/mtximage

================================================================================

                         ASSIGNMETNS

Redefine data in KBD as a SEMAPHORE, as in

typedef struct kbd{
    char buf[KBLEN];
    int  head, tail;
    SEMAPHORE data;   // initialize data.value=0; data.queue=0;
}KBD;

1. Instead of sleep()/wakeup(), USE P/V on SEMAPHORE for synchronization.



typedef struct kbd{
  char buf[KBLEN];
  int  head, tail;
  SEMAPHORE data;
}KBD;

KBD kbd;

extern int color;

int kbd_init()
{
  printf("kbinit()\n");

  kbd.head = kbd.tail = 0;

  // kb.data.value = kb.data.queue = 0;
  kbd.data.value = 0;
  kbd.data.queue = 0;

  printf("kbinit done\n"); 
}

int kbhandler()
{
  int scode, value, c;
  KBD *kp = &kbd;

  (1). get scan code; ACK to port;

  if (scode & 0x80)
    goto out;

  // translate scan code to ASCII, using shift[ ] table if shifted;
  c = unshift[scode];

 (2). Store the character c in kbd.buf[] for process to get
 
 (3). V(&kbd.data);

out:
  out_byte(0x20, 0x20);
}

/********************** upper half rotuine ***********************/ 

int getc()
{
  int c;
  P(&kbd.data);

  lock();
    c = kbd.buf[kbd.tail++] & 0x7F;
    kbd.tail %= KBLEN;
  unlock();

  return c;
}

2. Modify kbd.c to handle
   Upper case keys, FUN keys F1 for ps(), F2 for print readyQueue, etc.

----------------------------------------------------------------------------

4. Why Interrupt Handlers Should Never Sleep or Block

    In the KBD driver, the interrupt handler writes chars to the input buffer 
and processes extract chars from the input buffer. It looks like a pipe but
there is a major difference. In the pipe case, both ends are processes. In the 
KBD driver case, the write-end is not a process but an interrupt handler. Unlike
a process, an interrupt handler should never sleep or become blocked, for the 
following reasons.

(a). Sleeping or blocking applies only to a process, not to a piece of code.
When an interrupt occurs, the current running process is diverted to handle the
interrupt, but we do not know which process that is. If an interrupt handler 
sleeps or blocks, it would cause the interrupted process to sleep or block. The
interrupted process may have nothing to do with the interrupt reason. It happens
to be the running process when the interrupt occurs, and it is now performing 
the interrupt processing service. Blocking such a samaritan process logically 
does not make sense.

(b). Blocking a process implies process switch. In all Unix-like systems,
switching process in Kmode is not allowed because the entire kernel is a 
critical region form process point of view.

(c). If the interrupted process was executing in Umode, switching process is 
possible, but this would leave the interrupt handler in an unfinished state,
redering the interrupt deivce unusable for an unknown period of time.

(d). If the interrupted process has set a lock and the interrupt handler tries 
to acquire the same lock again, the interrupted process would lock itself out. 

For these reasons, an interrupt handler should only do wakeup or unblocking but
should never sleep or become blocked. Therefore, in the KBD interrupt handler, 
if the input buffer is full, instead of waiting for room, it simply sounds a 
warning beep, discards the input char and returns. 



/************************* KBD scan code info *****************************
US 104-key keyboard, set 1 scancodes

"Make" code is generated when key is pressed.
"Break" code is generated when key is released.
Hex value of make code for each key is shown.

Most keys:
	one-byte make code	= nn
	one-byte repeat code	= nn
	one-byte break code	= 80h + nn

"Gray" keys (not on original 84-key keyboard):
	two-byte make code	= E0nn
	two-byte repeat code	= E0nn
	two-byte break code	= E0 followed by 80h + nn

"Gray" keys noted by [1] are NumLock-sensitive.
When the keyboard's internal NumLock is active:
	four-byte make code	= E02AE0nn
	two-byte repeat code	= E0nn
	four-byte break code	= E0 followed by 80h + nn followed by E0AA

 ____    ___________________    ___________________    ___________________
|    |  |    |    |    |    |  |    |    |    |    |  |    |    |    |    |
|Esc |  |F1  |F2  |F3  |F4  |  |F5  |F6  |F7  |F8  |  |F9  |F10 |F11 |F12 |
|    |  |    |    |    |    |  |    |    |    |    |  |    |    |    |    |
|  01|  |  3B|  3C|  3D|  3E|  |  3F|  40|  41|  42|  |  43|  44|  57|  58|
|____|  |____|____|____|____|  |____|____|____|____|  |____|____|____|____|

JJ: Can make pressing F2 print readyQueue and other similar assignments
 __________________________________________________________________________
|    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |
|~   |!   |@   |#   |$   |%   |^   |&   |*   |(   |)   |_   |+   ||   |bksp|
|`   |1   |2   |3   |4   |5   |6   |7   |8   |9   |0   |-   |=   |\   |    |
|  29|  02|  03|  04|  05|  06|  07|  08|  09|  0A|  0B|  0C|  0D|  2B|  0E|
|____|____|____|____|____|____|____|____|____|____|____|____|____|____|____|
|    |    |    |    |    |    |    |    |    |    |    |    |    |         |
|Tab |Q   |W   |E   |R   |T   |Y   |U   |I   |O   |P   |{   |}   |         |
|    |    |    |    |    |    |    |    |    |    |    |[   |]   |         |
|  0F|  10|  11|  12|  13|  14|  15|  16|  17|  18|  19|  1A|  1B|         |
|____|____|____|____|____|____|____|____|____|____|____|____|____|         |
|    |    |    |    |    |    |    |    |    |    |    |    |              |
|Caps|A   |S   |D   |F   |G   |H   |J   |K   |L   |:   |"   |     Enter    |
|    |    |    |    |    |    |    |    |    |    |;   |'   |              |
|  3A|  1E|  1F|  20|  21|  22|  23|  24|  25|  26|  27|  28|            1C|
|____|____|____|____|____|____|____|____|____|____|____|____|______________|
|         |    |    |    |    |    |    |    |    |    |    |              |
| L Shift |Z   |X   |C   |V   |B   |N   |M   |<   |>   |?   |   R Shift    |
|         |    |    |    |    |    |    |    |,   |.   |/   |              |
|       2A|  2C|  2D|  2E|  2F|  30|  31|  32|  33|  34|  35|            36|
|_________|____|____|____|____|____|____|____|____|____|____|______________|
|       |       |       |                  |       |       |       |       |
|L Ctrl | L win | L Alt |       space      | R Alt | R win | menu  |R Ctrl |
|       |[1]    |       |                  |       |[1]    |[1]    |       |
|     1D|   E05B|     38|                39|   E038|   E05C|   E05D|   E01D|
|_______|_______|_______|__________________|_______|_______|_______|_______|


[2] For PrintScreen/SysRq key: make code = E02AE037,
repeat code = E037, break code = E0B7E0AA

[3] The Pause/Break key does not repeat, and it does not
generate a break code. Its make code is E11D45E19DC5

 ____ ____ ____
|    |    |    |
|Prt |Scrl|Paus|
|Scrn|Lock|Brk |
| [2]|  46| [3]|
|____|____|____|

 ____ ____ ____   ____ ____ ____ ____
|    |    |    | |    |    |    |    |
|Ins |Home|PgUp| |Num |/   |*   |-   |
|[1] |[1] |[1] | |Lock|    |    |    |
|E052|E047|E049| |  45|E035|  37|  4A|
|____|____|____| |____|____|____|____|
|    |    |    | |    |    |    |    |
|Del |End |PgDn| |7   |8   |9   |    |
|[1] |[1] |[1] | |Home|(U) |PgUp|    |
|E053|E04F|E051| |  47|  48|  49|    |
|____|____|____| |____|____|____|    |
		 |    |    |    |+   |
		 |4   |5   |6   |    |
		 |(L) |    |(R) |    |
		 |  4B|  4C|  4D|  4E|
      ____       |____|____|____|____|
     |    |      |    |    |    |    |
     |(U) |      |1   |2   |3   |    |
     |[1] |      |End |(D) |PgDn|    |
     |E048|      |  4F|  50|  51|Ent |
 ____|____|____  |____|____|____|    |
|    |    |    | |         |    |    |
|(L) |(D) |(R) | |0        |.   |    |
|[1] |[1] |[1] | |Ins      |Del |    |
|E04B|E050|E04D| |       52|  53|E01C|
|____|____|____| |_________|____|____|


code key        code key        code key        code key
---- ---        ---- ---        ---- ---        ---- ---
01   Esc        0F   Tab        1D   L Ctrl     2B   \|
02   1!         10   Q          1E   A          2C   Z
03   2"         11   W          1F   S          2D   X
04   3#         12   E          20   D          2E   C
05   4$         13   R          21   F          2F   V
06   5%         14   T          22   G          30   B
07   6^         15   Y          23   H          31   N
08   7&         16   U          24   J          32   M
09   8*         17   I          25   K          33   ,<
0A   9(         18   O          26   L          34   .>
0B   0)         19   P          27   ;:         35   /?
0C   -_         1A   [{         28   '"         36   R Shift
0D   =+         1B   ]}         29   `~         37   *
0E   BackSpace  1C   Enter      2A   L Shift    38   L Alt

code key        code key        code key        code key
---- ---        ---- ---        ---- ---        ---- ---
39   Space      41   F7         49   PageUp 9   51   PageDown 3
3A   CapsLock   42   F8         4A   -          52   Insert 0
3B   F1         43   F9         4B   (left) 4   53   Del .
3C   F2         44   F10        4C   5
3D   F3         45   NumLock    4D   (right) 6  57   F11
3E   F4         46   ScrollLock 4E   +          58   F12
3F   F5         47   Home  7    4F   End 1
40   F6         48   (up) 8     50   (down) 2


code            key
----            ---
E01C            Enter (on numeric keypad)
E01D            R Ctrl
E02A            make code prefix for keyboard internal numlock
E02AE037        PrintScreen make code
E035            /
E037            PrintScreen repeat code
E038            R Alt
E047            Home
E048            (up)
E049            PageUp
E04B            (left)
E04D            (right)
E04F            End
E050            (down)
E051            PageDown
E052            Insert
E053            Del
E05B            L Win
E05C            R Win
E05D            Menu
E0AA            break code suffix for keyboard internal numlock
E0B7E0AA        PrintScreen break code
E11D45E19DC5    Pause
*****************************************************************************/
